@using GeoJourneyer.App.Shared.Models
@inject NotificationService NotificationService
@inject ApiProxyClient ApiClient

<div class="notify-container">
    <button class="notify-icon" @onclick="Toggle">
        <i class="fa-solid fa-bell"></i>
        @if (NotificationService.HasUnread)
        {
            <span class="unread-dot"></span>
        }
    </button>
    @if (showList)
    {
        <ul class="notify-list">
            @if (NotificationService.Notifications.Any())
            {
                @foreach (var n in NotificationService.Notifications)
                {
                    <li class="@(n.IsRead ? string.Empty : "unread")">
                        @if (n.Type == NotificationType.FriendRequest)
                        {
                            <span class="text">@n.Text</span>
                            @if (!n.IsRead)
                            {
                                <span class="actions">
                                    <button class="accept" @onclick="() => Accept(n)">✔</button>
                                    <button class="reject" @onclick="() => Reject(n)">✖</button>
                                </span>
                            }
                        }
                        else
                        {
                            <span class="text" @onclick="() => Select(n)">@n.Text</span>
                        }
                    </li>
                }
            }
            else
            {
                <li class="no-notifications">No notifications</li>
            }
        </ul>
    }
</div>

@code {
    private bool showList;

    protected override async Task OnInitializedAsync()
    {
        NotificationService.OnChange += StateHasChanged;
        await NotificationService.InitializeAsync();
    }

    private async Task Toggle()
    {
        showList = !showList;
        if (showList)
        {
            await NotificationService.LoadAsync();
        }
    }

    private async Task Select(Notification n)
    {
        await NotificationService.MarkAsReadAsync(n);
    }

    private async Task Accept(Notification n)
    {
        if (n.FromUserId.HasValue)
        {
            await ApiClient.PostAsync<object, object>($"api/users/{n.FromUserId}/accept", new { });
        }
        NotificationService.MarkAsRead(n);
        await NotificationService.MarkAsReadAsync(n);
    }

    private async Task Reject(Notification n)
    {
        if (n.FromUserId.HasValue)
        {
            await ApiClient.PostAsync<object, object>($"api/users/{n.FromUserId}/reject", new { });
        }
        NotificationService.MarkAsRead(n);
        await NotificationService.MarkAsReadAsync(n);
    }

    public void Dispose()
    {
        NotificationService.OnChange -= StateHasChanged;
    }
}