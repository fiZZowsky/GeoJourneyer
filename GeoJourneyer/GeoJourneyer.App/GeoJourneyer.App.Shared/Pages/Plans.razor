@page "/plans"
@using GeoJourneyer.App.Shared.DTOs
@inject ApiProxyClient ApiClient
@inject AuthState AuthState
@inject NavigationManager Nav

<h1>Plans</h1>

@if (!AuthState.IsLoggedIn)
{
    <p>You are not logged in.</p>
}
else if (plans == null)
{
    <p>Loading...</p>
}
else
{
    <button class="new-btn" @onclick="Create">New Plan</button>
    <ul class="plans-list">
        @foreach (var p in plans)
        {
            <li>
                <a href="/plans/@p.Id">@p.Name</a>
                <span class="meta">@p.CreatedAt.ToString("yyyy-MM-dd") - @p.PlaceCount places</span>
            </li>
        }
    </ul>
}

@code {
    private List<TravelPlanInfoDto>? plans;

    protected override async Task OnInitializedAsync()
    {
        var uid = GetUserId();
        if (uid != null)
        {
            plans = await ApiClient.GetAsync<List<TravelPlanInfoDto>>($"api/travel-plans/{uid}");
        }
    }

    private void Create() => Nav.NavigateTo("/plans/create");

    private int? GetUserId()
    {
        if (string.IsNullOrEmpty(AuthState.Token)) return null;
        var parts = AuthState.Token.Split('.');
        if (parts.Length < 2) return null;
        try
        {
            var json = System.Text.Encoding.UTF8.GetString(Base64UrlDecode(parts[1]));
            using var doc = System.Text.Json.JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty("sub", out var sub) && int.TryParse(sub.GetString(), out var id))
                return id;
        }
        catch { }
        return null;
    }

    private static byte[] Base64UrlDecode(string input)
    {
        input = input.Replace('-', '+').Replace('_', '/');
        return System.Convert.FromBase64String(input.PadRight(input.Length + (4 - input.Length % 4) % 4, '='));
    }
}