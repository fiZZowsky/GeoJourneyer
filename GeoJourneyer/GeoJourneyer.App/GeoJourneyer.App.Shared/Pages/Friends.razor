@page "/friends"
@inject ApiProxyClient ApiClient

<h1>Friends</h1>
<div class="search-container">
    <input placeholder="Search by username" value="@query" @oninput="OnInput" />
    @if (results != null)
    {
        <ul class="results">
            @foreach (var u in results)
            {
                <li>
                    <a href="/user/@u.Id">@u.Username</a>
                    @if (statuses.TryGetValue(u.Id, out var status))
                    {
                        @switch (status)
                        {
                            case FriendRequestStatus.Pending:
                                <span class="pending">Waiting for accept</span>
                                ;
                                break;
                            case FriendRequestStatus.Accepted:
                                <span class="accepted">✔</span>
                                ;
                                break;
                            default:
                                <button @onclick="() => Invite(u.Id)">Invite</button>
                                ;
                                break;
                        }
                    }
                    else
                    {
                        <button @onclick="() => Invite(u.Id)">Invite</button>
                    }
                </li>
            }
        </ul>
    }
</div>

@code {
    private string query = string.Empty;
    private IEnumerable<PublicUserDto>? results;
    private Dictionary<int, FriendRequestStatus> statuses = new();

    private async Task OnInput(ChangeEventArgs e)
    {
        query = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(query))
        {
            results = null;
            return;
        }
        results = await ApiClient.GetAsync<IEnumerable<PublicUserDto>>($"api/users/search?q={Uri.EscapeDataString(query)}");
        statuses.Clear();
        if (results != null)
        {
            foreach (var u in results)
            {
                var req = await ApiClient.GetAsync<FriendRequestDto>($"api/users/{u.Id}/invite");
                if (req != null)
                {
                    statuses[u.Id] = req.Status;
                }
            }
        }
    }

    private async Task Invite(int id)
    {
        var resp = await ApiClient.PostAsync<object, int?>($"api/users/{id}/invite", new { });
        if (resp != null)
        {
            statuses[id] = FriendRequestStatus.Pending;
        }
    }
}