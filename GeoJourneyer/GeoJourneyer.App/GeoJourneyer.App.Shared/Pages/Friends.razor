@page "/friends"
@using GeoJourneyer.App.Shared.Enums
@using GeoJourneyer.App.Shared.DTOs
@using GeoJourneyer.App.Shared.DTOs
@inject ApiProxyClient ApiClient
@inject AuthState AuthState

<h1>Friends</h1>

@if (friends == null)
{
    <p>Loading...</p>
}
else if (friends.Any())
{
    <ul class="friends-list">
        @foreach (var f in friends)
        {
            <li><a href="/user/@f.Id">@f.Username</a></li>
        }
    </ul>
}
else
{
    <p>No friends yet.</p>
}


<div class="search-container">
    <input placeholder="Search by username" value="@query" @oninput="OnInput" />
    @if (results != null)
    {
        <ul class="results">
            @foreach (var u in results)
            {
                <li>
                    <a href="/user/@u.Id">@u.Username</a>
                    @if (statuses.TryGetValue(u.Id, out var status))
                    {
                        @switch (status)
                        {
                            case FriendRequestStatus.Pending:
                                <span class="pending">Waiting for accept</span>
                                ;
                                break;
                            case FriendRequestStatus.Accepted:
                                <span class="accepted">✔</span>
                                ;
                                break;
                            default:
                                <button @onclick="() => Invite(u.Id)">Invite</button>
                                ;
                                break;
                        }
                    }
                    else
                    {
                        <button @onclick="() => Invite(u.Id)">Invite</button>
                    }
                </li>
            }
        </ul>
    }
</div>

@code {
    private string query = string.Empty;
    private IEnumerable<PublicUserDto>? results;
    private List<PublicUserDto>? friends;
    private Dictionary<int, FriendRequestStatus> statuses = new();

    protected override async Task OnInitializedAsync()
    {
        var id = GetUserId();
        if (id != null)
        {
            friends = await ApiClient.GetAsync<List<PublicUserDto>>($"api/users/{id}/friends");
        }
    }

    private async Task OnInput(ChangeEventArgs e)
    {
        query = e.Value?.ToString() ?? string.Empty;
        if (string.IsNullOrWhiteSpace(query))
        {
            results = null;
            return;
        }
        results = await ApiClient.GetAsync<IEnumerable<PublicUserDto>>($"api/users/search?q={Uri.EscapeDataString(query)}");
        statuses.Clear();
        if (results != null)
        {
            foreach (var u in results)
            {
                var req = await ApiClient.GetAsync<FriendRequestDto>($"api/users/{u.Id}/invite");
                if (req != null)
                {
                    statuses[u.Id] = req.Status;
                }
            }
        }
    }

    private async Task Invite(int id)
    {
        var resp = await ApiClient.PostAsync<object, int?>($"api/users/{id}/invite", new { });
        if (resp != null)
        {
            statuses[id] = FriendRequestStatus.Pending;
        }
    }

    private int? GetUserId()
    {
        var token = AuthState.Token;
        if (string.IsNullOrEmpty(token)) return null;
        var parts = token.Split('.');
        if (parts.Length < 2) return null;
        try
        {
            var json = System.Text.Encoding.UTF8.GetString(Base64UrlDecode(parts[1]));
            using var doc = System.Text.Json.JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty("sub", out var sub) && int.TryParse(sub.GetString(), out var id))
                return id;
        }
        catch { }
        return null;
    }

    private static byte[] Base64UrlDecode(string input)
    {
        input = input.Replace('-', '+').Replace('_', '/');
        return System.Convert.FromBase64String(input.PadRight(input.Length + (4 - input.Length % 4) % 4, '='));
    }
}