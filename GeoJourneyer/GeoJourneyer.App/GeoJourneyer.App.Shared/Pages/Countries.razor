@page "/countries"
@inject ApiProxyClient ApiClient
@inject AuthState AuthState
@inject IJSRuntime JS
@* @inject LoadingService LoadingService *@
@using GeoJourneyer.App.Shared.Enums
@using Microsoft.JSInterop

@implements IDisposable

<PageTitle>Countries</PageTitle>

<h1>Countries</h1>
<button class="view-toggle" @onclick="ToggleView">@(showGlobe ? "Show List" : "Show Globe")</button>

@if (allCountries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    @if (showGlobe)
    {
        <div id="globeContainer" style="width:100%; height:600px;"></div>
    }
    else
    {
        <div class="countries-page">
            <div class="list">
                <h2>Visited</h2>
                <ul>
                    @foreach (var vc in visited)
                    {
                        <li>
                            @vc.Country
                            <button class="remove-btn" @onclick="() => RemoveCountry(vc)">Remove</button>
                        </li>
                    }
                </ul>
            </div>
            <div class="list">
                <h2>To Visit</h2>
                <ul>
                    @foreach (var c in toVisit)
                    {
                        <li>
                            @c.Name
                            <button @onclick="() => AddCountry(c)">Add</button>
                        </li>
                    }
                </ul>
            </div>
        </div>
   }
}

@code {
    private bool showGlobe = false;
    private bool globeInit = false;
    private IEnumerable<CountryDto>? allCountries;
    private List<UserCountryDto> visited = new();
    private IEnumerable<CountryDto> toVisit = Enumerable.Empty<CountryDto>();
    private DotNetObjectReference<Countries>? objRef;

    protected override async Task OnInitializedAsync()
    {
        allCountries = await ApiClient.GetAsync<IEnumerable<CountryDto>>("api/countries");
        var uid = GetUserId();
        if (uid != null)
        {
            var list = await ApiClient.GetAsync<IEnumerable<UserCountryDto>>($"api/user-countries/{uid}");
            if (list != null) visited = list.ToList();
        }
        ComputeToVisit();
    }

    private async Task AddCountry(CountryDto country)
    {
        var uid = GetUserId();
        if (uid == null) return;
        var payload = new UserCountryDto(0, uid.Value, country.Name, CountryStatus.Visited);
        var id = await ApiClient.PostAsync<UserCountryDto, int>("api/user-countries", payload);
        if (id > 0)
        {
            visited.Add(payload with { Id = id });
            ComputeToVisit();
            if (showGlobe)
            {
                await JS.InvokeVoidAsync("updateVisitedCountries", visited.Select(v => v.Country).ToArray());
            }
        }
    }

    private async Task RemoveCountry(UserCountryDto country)
    {
        await ApiClient.DeleteAsync<object>($"api/user-countries/{country.Id}");
        visited.Remove(country);
        ComputeToVisit();
        if (showGlobe)
        {
            await JS.InvokeVoidAsync("updateVisitedCountries", visited.Select(v => v.Country).ToArray());
        }
    }

    private void ComputeToVisit()
    {
        if (allCountries == null) return;
        var visitedNames = visited.Select(v => v.Country).ToHashSet();
        toVisit = allCountries.Where(c => !visitedNames.Contains(c.Name));
    }

    private async Task ToggleView()
    {
        showGlobe = !showGlobe;
        var visitedNames = visited.Select(v => v.Country).ToArray();
        if (showGlobe && !globeInit)
        {
            // LoadingService.Begin();
            objRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initGlobe", visitedNames, objRef);
            globeInit = true;
        }
        else if (showGlobe)
        {
            await JS.InvokeVoidAsync("updateVisitedCountries", visitedNames);
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (showGlobe && !globeInit)
        {
            // LoadingService.Begin();
            objRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initGlobe", visited.Select(v => v.Country).ToArray(), objRef);
            globeInit = true;
        }
    }

    private int? GetUserId()
    {
        if (string.IsNullOrEmpty(AuthState.Token)) return null;
        var parts = AuthState.Token.Split('.');
        if (parts.Length < 2) return null;
        try
        {
            var json = System.Text.Encoding.UTF8.GetString(Base64UrlDecode(parts[1]));
            using var doc = System.Text.Json.JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty("sub", out var sub))
            {
                if (int.TryParse(sub.GetString(), out var id))
                    return id;
            }
        }
        catch { }
        return null;
    }

    private static byte[] Base64UrlDecode(string input)
    {
        input = input.Replace('-', '+').Replace('_', '/');
        return System.Convert.FromBase64String(input.PadRight(input.Length + (4 - input.Length % 4) % 4, '='));
    }

    // TODO: not working
    // [JSInvokable]
    // public void GlobeLoaded()
    // {
    //     LoadingService.End();
    // }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    [JSInvokable]
    public async Task ToggleCountry(string name)
    {
        var existing = visited.FirstOrDefault(v => v.Country == name);
        if (existing != null)
        {
            await RemoveCountry(existing);
        }
        else
        {
            var country = allCountries?.FirstOrDefault(c => c.Name == name);
            if (country != null)
            {
                await AddCountry(country);
            }
        }
    }
}