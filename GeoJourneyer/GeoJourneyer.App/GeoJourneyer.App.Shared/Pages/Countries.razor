@page "/countries"
@inject ApiProxyClient ApiClient
@inject AuthState AuthState
@inject IJSRuntime JS
@* @inject LoadingService LoadingService *@
@using GeoJourneyer.App.Shared.Enums
@using Microsoft.JSInterop

@implements IDisposable

<PageTitle>Countries</PageTitle>

@if (allCountries == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div id="globeContainer" style="width:100%; height:600px;"></div>
}

@code {
    private bool _globeInitialized;
    private IEnumerable<CountryDto>? allCountries;
    private List<UserCountryDto> visited = new();
    private DotNetObjectReference<Countries>? objRef;

    protected override async Task OnInitializedAsync()
    {
        allCountries = await ApiClient.GetAsync<IEnumerable<CountryDto>>("api/countries");
        var uid = GetUserId();
        if (uid != null)
        {
            var list = await ApiClient.GetAsync<IEnumerable<UserCountryDto>>($"api/user-countries/{uid}");
            if (list != null) visited = list.ToList();
        }
    }

    private async Task AddCountry(CountryDto country)
    {
        var uid = GetUserId();
        if (uid == null) return;
        var payload = new UserCountryDto(0, uid.Value, country.IsoCode, CountryStatus.Visited);
        var id = await ApiClient.PostAsync<UserCountryDto, int>("api/user-countries", payload);
        if (id > 0)
        {
            visited.Add(payload with { Id = id });
            await JS.InvokeVoidAsync("updateVisitedCountries", visited.Select(v => GetCountryName(v.Country)).ToArray());
        }
    }

    private async Task RemoveCountry(UserCountryDto country)
    {
        if (country.Status == CountryStatus.Living)
            return;
        await ApiClient.DeleteAsync<object>($"api/user-countries/{country.Id}");
        visited.Remove(country);
        await JS.InvokeVoidAsync("updateVisitedCountries", visited.Select(v => GetCountryName(v.Country)).ToArray());
    }

    private string GetCountryName(string isoCode)
    {
        return allCountries?.FirstOrDefault(c => c.IsoCode == isoCode)?.Name ?? isoCode;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (!_globeInitialized && allCountries != null)
        {
            // LoadingService.Begin();
            _globeInitialized = true;
            objRef ??= DotNetObjectReference.Create(this);
            await JS.InvokeVoidAsync("initGlobe", visited.Select(v => GetCountryName(v.Country)).ToArray(), objRef);
        }
    }

    private int? GetUserId()
    {
        if (string.IsNullOrEmpty(AuthState.Token)) return null;
        var parts = AuthState.Token.Split('.');
        if (parts.Length < 2) return null;
        try
        {
            var json = System.Text.Encoding.UTF8.GetString(Base64UrlDecode(parts[1]));
            using var doc = System.Text.Json.JsonDocument.Parse(json);
            if (doc.RootElement.TryGetProperty("sub", out var sub))
            {
                if (int.TryParse(sub.GetString(), out var id))
                    return id;
            }
        }
        catch { }
        return null;
    }

    private static byte[] Base64UrlDecode(string input)
    {
        input = input.Replace('-', '+').Replace('_', '/');
        return System.Convert.FromBase64String(input.PadRight(input.Length + (4 - input.Length % 4) % 4, '='));
    }

    // TODO: not working
    // [JSInvokable]
    // public void GlobeLoaded()
    // {
    //     LoadingService.End();
    // }

    public void Dispose()
    {
        objRef?.Dispose();
    }

    [JSInvokable]
    public async Task ToggleCountry(string name)
    {
        var iso = allCountries?.FirstOrDefault(c => c.Name == name)?.IsoCode;
        if (iso == null) return;

        var existing = visited.FirstOrDefault(v => v.Country == iso);
        if (existing != null)
        {
            await RemoveCountry(existing);
        }
        else
        {
            var country = allCountries?.FirstOrDefault(c => c.IsoCode == iso);
            if (country != null)
            {
                await AddCountry(country);
            }
        }
    }
}