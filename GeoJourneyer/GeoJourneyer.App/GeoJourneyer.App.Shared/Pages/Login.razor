@page "/login"
@using Blazorise
@using Blazorise.Icons.FontAwesome
@inject ApiProxyClient ApiClient
@inject AuthState AuthState

<div class="login-container">
    <div class="form-selector">
        <span class="label">Login</span>
        <label class="switch">
            <input type="checkbox" @bind="isRegister" />
            <span class="slider"></span>
        </label>
        <span class="label">Register</span>
    </div>

    <div class="form-wrapper">
        @if (!isRegister)
        {
            <form class="auth-form" @onsubmit="OnLoginAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <Icon Name="Envelope" Class="icon" />
                    <input @bind="username" placeholder="name@mail.com" required />
                </div>
                <div class="input-group">
                    <Icon Name="Lock" Class="icon" />
                    <input type="password" @bind="password" placeholder="Password" required />
                </div>
                <button type="submit">Sign In</button>
            </form>
        }
        else
        {
            <form class="auth-form" @onsubmit="OnRegisterAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <Icon Name="User" Class="icon" />
                    <input @bind="regUsername" placeholder="Username" required />
                </div>
                <div class="input-group">
                    <Icon Name="Envelope" Class="icon" />
                    <input type="email" @bind="regEmail" placeholder="Email" required />
                </div>
                <div class="input-group">
                    <Icon Name="Lock" Class="icon" />
                    <input type="password" @bind="regPassword" placeholder="Password" required />
                </div>
                <button type="submit">Sign Up</button>
            </form>
        }
        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }
    </div>
</div>

@code {
    private bool isRegister = false;

    private string? Message;
    private string username = string.Empty;
    private string password = string.Empty;
    private string regUsername = string.Empty;
    private string regEmail = string.Empty;
    private string regPassword = string.Empty;

    private async Task OnLoginAsync()
    {
        var token = await ApiClient.PostAsync<object, string>(
            "api/auth/login",
            new { Username = username, Password = password });
        if (token != null)
        {
            ApiClient.SetToken(token);
            AuthState.SignIn(username, token);
            Message = "Logged in";
        }
        else
        {
            Message = "Invalid credentials";
        }
    }

    private async Task OnRegisterAsync()
    {
        var token = await ApiClient.PostAsync<object, string>(
            "api/auth/register",
            new { Username = regUsername, Email = regEmail, Password = regPassword });
        if (token != null)
        {
            ApiClient.SetToken(token);
            AuthState.SignIn(regUsername, token);
            Message = "Registered";
        }
        else
        {
            Message = "Registration failed";
        }
    }
}
