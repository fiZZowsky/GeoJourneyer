@page "/login"
@inject ApiProxyClient ApiClient
@inject AuthState AuthState
@inject RegisterValidator RegisterValidator
@inject NavigationManager Navigation

<div class="login-container">
    <div class="form-selector">
        <span class="label">Login</span>
        <label class="switch">
            <input type="checkbox" @bind="isRegister" />
            <span class="slider"></span>
        </label>
        <span class="label">Register</span>
    </div>

    <div class="form-wrapper">
        @if (!isRegister)
        {
            <form class="auth-form" @onsubmit="OnLoginAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <i class="fa-solid fa-envelope icon"></i>
                    <input @bind="username"
                           @bind:event="oninput"
                           placeholder="name@mail.com" required />
                </div>
                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@loginPasswordType"
                           @bind="password"
                           @bind:event="oninput"
                           placeholder="Enter password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowLoginPassword"
                            @onmouseup="HideLoginPassword"
                            @onmouseleave="HideLoginPassword"
                            @ontouchstart="ShowLoginPassword"
                            @ontouchend="HideLoginPassword">
                        <i class="fa-solid @loginPasswordIcon"></i>
                    </button>
                </div>
                <button type="submit">Sign In</button>
            </form>
        }
        else
        {
            <form class="auth-form" @onsubmit="OnRegisterAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <i class="fa-solid fa-user icon"></i>
                    <input @bind="regUsername"
                           @bind:event="oninput"
                           @bind:after="ValidateRegUsername"
                           class="@GetInputClass(regUsernameErrors)"
                           placeholder="Username" />
                </div>
                @if (regUsernameErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regUsernameErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group">
                    <i class="fa-solid fa-envelope icon"></i>
                    <input type="email"
                           @bind="regEmail"
                           @bind:event="oninput"
                           @bind:after="ValidateRegEmail"
                           class="@GetInputClass(regEmailErrors)"
                           placeholder="Email" />
                </div>
                @if (regEmailErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regEmailErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@regPasswordType"
                           @bind="regPassword"
                           @bind:event="oninput"
                           @bind:after="ValidateRegPassword"
                           class="@GetInputClass(regPasswordErrors)"
                           placeholder="Password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowRegPassword"
                            @onmouseup="HideRegPassword"
                            @onmouseleave="HideRegPassword"
                            @ontouchstart="ShowRegPassword"
                            @ontouchend="HideRegPassword">
                        <i class="fa-solid @regPasswordIcon"></i>
                    </button>
                </div>
                @if (regPasswordErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regPasswordErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@regConfirmPasswordType"
                           @bind="regPasswordConfirm"
                           @bind:event="oninput"
                           @bind:after="ValidateConfirmPassword"
                           class="@GetInputClass(regConfirmErrors)"
                           placeholder="Confirm Password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowRegConfirmPassword"
                            @onmouseup="HideRegConfirmPassword"
                            @onmouseleave="HideRegConfirmPassword"
                            @ontouchstart="ShowRegConfirmPassword"
                            @ontouchend="HideRegConfirmPassword">
                        <i class="fa-solid @regConfirmPasswordIcon"></i>
                    </button>
                </div>
                @if (regConfirmErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regConfirmErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }
                <div class="input-group">
                    <i class="fa-solid fa-user icon"></i>
                    <input @bind="regFirstName" @bind:event="oninput" @bind:after="ValidateFirstName"
                           class="@GetInputClass(regFirstNameErrors)" placeholder="First name" />
                </div>
                @if (regFirstNameErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regFirstNameErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group">
                    <i class="fa-solid fa-user icon"></i>
                    <input @bind="regLastName" @bind:event="oninput" @bind:after="ValidateLastName"
                           class="@GetInputClass(regLastNameErrors)" placeholder="Last name" />
                </div>
                @if (regLastNameErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regLastNameErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group">
                    <i class="fa-solid fa-cake-candles icon"></i>
                    <input type="number" @bind="regAge" @bind:event="oninput" @bind:after="ValidateAge"
                           class="@GetInputClass(regAgeErrors)" placeholder="Age" />
                </div>
                @if (regAgeErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regAgeErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group">
                    <i class="fa-solid fa-flag icon"></i>
                    <input @bind="regCountry" @bind:event="oninput" @bind:after="ValidateCountry"
                           class="@GetInputClass(regCountryErrors)" placeholder="Country of origin" />
                </div>
                @if (regCountryErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regCountryErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group">
                    <input type="file" @onchange="OnFileSelected" />
                </div>

                <button type="submit">Sign Up</button>
            </form>
        }

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }
    </div>
</div>

@code {
    private bool isRegister = false;

    private string? Message;
    private string username = string.Empty;
    private string password = string.Empty;
    private string regUsername = string.Empty;
    private string regEmail = string.Empty;
    private string regPassword = string.Empty;
    private string regPasswordConfirm = string.Empty;
    private string regFirstName = string.Empty;
    private string regLastName = string.Empty;
    private string regAge = string.Empty;
    private string regCountry = string.Empty;
    private IBrowserFile? regPhoto;

    private List<string> regUsernameErrors = new();
    private List<string> regEmailErrors = new();
    private List<string> regPasswordErrors = new();
    private List<string> regConfirmErrors = new();
    private List<string> regFirstNameErrors = new();
    private List<string> regLastNameErrors = new();
    private List<string> regAgeErrors = new();
    private List<string> regCountryErrors = new();

    private string loginPasswordType = "password";
    private string regPasswordType = "password";
    private string regConfirmPasswordType = "password";

    private string loginPasswordIcon = "fa-eye";
    private string regPasswordIcon = "fa-eye";
    private string regConfirmPasswordIcon = "fa-eye";

    private void ValidateRegUsername() =>
        regUsernameErrors = RegisterValidator.ValidateUsername(regUsername);

    private void ValidateRegEmail() =>
        regEmailErrors = RegisterValidator.ValidateEmail(regEmail);

    private void ValidateRegPassword()
    {
        regPasswordErrors = RegisterValidator.ValidatePassword(regPassword);
        ValidateConfirmPassword();
    }

    private void ValidateConfirmPassword() =>
        regConfirmErrors = RegisterValidator.ValidateConfirmPassword(regPassword, regPasswordConfirm);

    private void ValidateFirstName() =>
   regFirstNameErrors = RegisterValidator.ValidateFirstName(regFirstName);

    private void ValidateLastName() =>
        regLastNameErrors = RegisterValidator.ValidateLastName(regLastName);

    private void ValidateAge() =>
        regAgeErrors = RegisterValidator.ValidateAge(regAge);

    private void ValidateCountry() =>
        regCountryErrors = RegisterValidator.ValidateCountry(regCountry);

    private bool ValidateForm()
    {
        ValidateRegUsername();
        ValidateRegEmail();
        ValidateRegPassword();
        ValidateConfirmPassword();
        ValidateFirstName();
        ValidateLastName();
        ValidateAge();
        ValidateCountry();
        return !(regUsernameErrors.Any()
              || regEmailErrors.Any()
              || regPasswordErrors.Any()
              || regConfirmErrors.Any()
              || regFirstNameErrors.Any()
              || regLastNameErrors.Any()
              || regAgeErrors.Any()
              || regCountryErrors.Any());
    }

    private static string GetInputClass(List<string> errors) =>
        errors.Any() ? "invalid" : string.Empty;

    private async Task OnLoginAsync()
    {
        var response = await ApiClient.PostAsync<object, AuthTokenDto>(
            "api/auth/login",
            new { Email = username, Password = password });

        if (response?.Token != null)
        {
            ApiClient.SetToken(response.Token);
            await AuthState.SignInAsync(username, response.Token);
            Message = "Logged in";
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = "Invalid credentials";
        }
    }

    private async Task OnRegisterAsync()
    {
        if (!ValidateForm()) return;

        var content = new MultipartFormDataContent();
        content.Add(new StringContent(regUsername), "Username");
        content.Add(new StringContent(regEmail), "Email");
        content.Add(new StringContent(regPassword), "Password");
        content.Add(new StringContent(regFirstName), "FirstName");
        content.Add(new StringContent(regLastName), "LastName");
        content.Add(new StringContent(regAge), "Age");
        content.Add(new StringContent(regCountry), "CountryOfOrigin");
        if (regPhoto != null)
        {
            var fileContent = new StreamContent(regPhoto.OpenReadStream(10 * 1024 * 1024));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(regPhoto.ContentType);
            content.Add(fileContent, "Photo", regPhoto.Name);
        }

        var response = await ApiClient.PostMultipartAsync<AuthTokenDto>("api/auth/register", content);

        if (response?.Token != null)
        {
            ApiClient.SetToken(response.Token);
            await AuthState.SignInAsync(regUsername, response.Token);
            Message = "Registered";
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = "Registration failed";
        }
    }

    private void ShowLoginPassword()
    {
        loginPasswordType = "text";
        loginPasswordIcon = "fa-eye-slash";
    }

    private void HideLoginPassword()
    {
        loginPasswordType = "password";
        loginPasswordIcon = "fa-eye";
    }

    private void ShowRegPassword()
    {
        regPasswordType = "text";
        regPasswordIcon = "fa-eye-slash";
    }

    private void HideRegPassword()
    {
        regPasswordType = "password";
        regPasswordIcon = "fa-eye";
    }

    private void ShowRegConfirmPassword()
    {
        regConfirmPasswordType = "text";
        regConfirmPasswordIcon = "fa-eye-slash";
    }

    private void HideRegConfirmPassword()
    {
        regConfirmPasswordType = "password";
        regConfirmPasswordIcon = "fa-eye";
    }
    private void OnFileSelected(InputFileChangeEventArgs e)
    {
        regPhoto = e.File;
    }
}
