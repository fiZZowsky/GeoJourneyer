@page "/login"
@inject ApiProxyClient ApiClient
@inject AuthState AuthState
@inject RegisterValidator RegisterValidator

<div class="login-container">
    <div class="form-selector">
        <span class="label">Login</span>
        <label class="switch">
            <input type="checkbox" @bind="isRegister" />
            <span class="slider"></span>
        </label>
        <span class="label">Register</span>
    </div>

    <div class="form-wrapper">
        @if (!isRegister)
        {
            <form class="auth-form" @onsubmit="OnLoginAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <i class="fa-solid fa-envelope icon"></i>
                    <input @bind="username" placeholder="name@mail.com" required />
                </div>
                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@loginPasswordType"
                           @bind="password"
                           placeholder="Enter password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowLoginPassword"
                            @onmouseup="HideLoginPassword"
                            @onmouseleave="HideLoginPassword"
                            @ontouchstart="ShowLoginPassword"
                            @ontouchend="HideLoginPassword">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
                <button type="submit">Sign In</button>
            </form>
        }
        else
        {
            <form class="auth-form" @onsubmit="OnRegisterAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <i class="fa-solid fa-user icon"></i>
                    <input @bind="regUsername"
                           @bind:event="oninput"
                           @bind:after="ValidateRegUsername"
                           class="@GetInputClass(regUsernameErrors)"
                           placeholder="Username" />
                </div>
                @if (regUsernameErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regUsernameErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group">
                    <i class="fa-solid fa-envelope icon"></i>
                    <input type="email"
                           @bind="regEmail"
                           @bind:event="oninput"
                           @bind:after="ValidateRegEmail"
                           class="@GetInputClass(regEmailErrors)"
                           placeholder="Email" />
                </div>
                @if (regEmailErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regEmailErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@regPasswordType"
                           @bind="regPassword"
                           @bind:event="oninput"
                           @bind:after="ValidateRegPassword"
                           class="@GetInputClass(regPasswordErrors)"
                           placeholder="Password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowRegPassword"
                            @onmouseup="HideRegPassword"
                            @onmouseleave="HideRegPassword"
                            @ontouchstart="ShowRegPassword"
                            @ontouchend="HideRegPassword">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
                @if (regPasswordErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regPasswordErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@regConfirmPasswordType"
                           @bind="regPasswordConfirm"
                           @bind:event="oninput"
                           @bind:after="ValidateConfirmPassword"
                           class="@GetInputClass(regConfirmErrors)"
                           placeholder="Confirm Password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowRegConfirmPassword"
                            @onmouseup="HideRegConfirmPassword"
                            @onmouseleave="HideRegConfirmPassword"
                            @ontouchstart="ShowRegConfirmPassword"
                            @ontouchend="HideRegConfirmPassword">
                        <i class="fa-solid fa-eye"></i>
                    </button>
                </div>
                @if (regConfirmErrors.Any())
                {
                    <ul class="validation-message">
                        @foreach (var e in regConfirmErrors)
                        {
                            <li>@e</li>
                        }
                    </ul>
                }

                <button type="submit">Sign Up</button>
            </form>
        }

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }
    </div>
</div>

@code {
    private bool isRegister = false;

    private string? Message;
    private string username = string.Empty;
    private string password = string.Empty;
    private string regUsername = string.Empty;
    private string regEmail = string.Empty;
    private string regPassword = string.Empty;
    private string regPasswordConfirm = string.Empty;

    private List<string> regUsernameErrors = new();
    private List<string> regEmailErrors = new();
    private List<string> regPasswordErrors = new();
    private List<string> regConfirmErrors = new();

    private string loginPasswordType = "password";
    private string regPasswordType = "password";
    private string regConfirmPasswordType = "password";

    private void ValidateRegUsername() =>
        regUsernameErrors = RegisterValidator.ValidateUsername(regUsername);

    private void ValidateRegEmail() =>
        regEmailErrors = RegisterValidator.ValidateEmail(regEmail);

    private void ValidateRegPassword()
    {
        regPasswordErrors = RegisterValidator.ValidatePassword(regPassword);
        ValidateConfirmPassword();
    }

    private void ValidateConfirmPassword() =>
        regConfirmErrors = RegisterValidator.ValidateConfirmPassword(regPassword, regPasswordConfirm);

    private bool ValidateForm()
    {
        ValidateRegUsername();
        ValidateRegEmail();
        ValidateRegPassword();
        ValidateConfirmPassword();
        return !(regUsernameErrors.Any()
              || regEmailErrors.Any()
              || regPasswordErrors.Any()
              || regConfirmErrors.Any());
    }

    private static string GetInputClass(List<string> errors) =>
        errors.Any() ? "invalid" : string.Empty;

    private async Task OnLoginAsync()
    {
        var token = await ApiClient.PostAsync<object, string>(
            "api/auth/login",
            new { Username = username, Password = password });

        if (token != null)
        {
            ApiClient.SetToken(token);
            AuthState.SignIn(username, token);
            Message = "Logged in";
        }
        else
        {
            Message = "Invalid credentials";
        }
    }

    private async Task OnRegisterAsync()
    {
        if (!ValidateForm()) return;

        var token = await ApiClient.PostAsync<object, string>(
            "api/auth/register",
            new { Username = regUsername, Email = regEmail, Password = regPassword });

        if (token != null)
        {
            ApiClient.SetToken(token);
            AuthState.SignIn(regUsername, token);
            Message = "Registered";
        }
        else
        {
            Message = "Registration failed";
        }
    }

    private void ShowLoginPassword()    => loginPasswordType = "text";
    private void HideLoginPassword()    => loginPasswordType = "password";
    private void ShowRegPassword()      => regPasswordType   = "text";
    private void HideRegPassword()      => regPasswordType   = "password";
    private void ShowRegConfirmPassword() => regConfirmPasswordType = "text";
    private void HideRegConfirmPassword() => regConfirmPasswordType = "password";
}
