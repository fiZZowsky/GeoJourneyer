@page "/login"
@inject ApiProxyClient ApiClient
@inject AuthState AuthState
@inject RegisterValidator RegisterValidator
@inject NavigationManager Navigation
@inject IJSRuntime JS
@using System.Text.Json
@using GeoJourneyer.App.Shared.DTOs
@using Microsoft.AspNetCore.Components.Forms
@using System.IO

<div class="login-container">
    <div class="form-selector">
        <span class="label">Login</span>
        <label class="switch">
            <input type="checkbox" @bind="isRegister" />
            <span class="slider"></span>
        </label>
        <span class="label">Register</span>
    </div>

    <div class="form-wrapper">
        @if (!isRegister)
        {
            <!-- ===== LOGIN ===== -->
            <form class="auth-form" @onsubmit="OnLoginAsync" @onsubmit:preventDefault>
                <div class="input-group">
                    <i class="fa-solid fa-envelope icon"></i>
                    <input @bind="username" @bind:event="oninput" placeholder="name@mail.com" required />
                </div>

                <div class="input-group password-group">
                    <i class="fa-solid fa-lock icon"></i>
                    <input type="@loginPasswordType"
                           @bind="password"
                           @bind:event="oninput"
                           placeholder="Enter password"
                           @oncopy:preventDefault />
                    <button type="button" class="reveal-btn"
                            @onmousedown="ShowLoginPassword"
                            @onmouseup="HideLoginPassword"
                            @onmouseleave="HideLoginPassword"
                            @ontouchstart="ShowLoginPassword"
                            @ontouchend="HideLoginPassword">
                        <i class="fa-solid @loginPasswordIcon"></i>
                    </button>
                </div>

                <div class="remember-me">
                    <input type="checkbox" id="remember" @bind="rememberMe" />
                    <label for="remember">Remember me</label>
                </div>

                <button type="submit">Sign In</button>
            </form>
        }
        else
        {
            <!-- ===== REGISTER ===== -->
            <div class="register-container">
                <div class="register-card">
                    <h2>User Registration</h2>

                    <form class="auth-form" @onsubmit="OnRegisterAsync" @onsubmit:preventDefault>
                        <!-- 1. Ukryty input-file -->
                        <InputFile id="photoInput"
                                   style="display:none"
                                   accept="image/*"
                                   OnChange="OnFileSelected" />

                        <label for="photoInput" class="photo-label" title="Upload Photo">
                            @if (!string.IsNullOrEmpty(photoPreview))
                            {
                                <img src="@photoPreview" class="photo-preview" />
                            }
                            else
                            {
                                <i class="fa-regular fa-user"></i>
                            }
                            <span>Upload Photo</span>
                        </label>

                        <!-- USERNAME -->
                        <div class="input-group username">
                            <i class="fa-solid fa-user icon"></i>
                            <input @bind="regUsername"
                                   @bind:event="oninput"
                                   @bind:after="ValidateRegUsername"
                                   class="@GetInputClass(regUsernameErrors)"
                                   placeholder="Username" />
                        </div>
                        @if (regUsernameErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regUsernameErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <!-- EMAIL -->
                        <div class="input-group email">
                            <i class="fa-solid fa-envelope icon"></i>
                            <input type="email"
                                   @bind="regEmail"
                                   @bind:event="oninput"
                                   @bind:after="ValidateRegEmail"
                                   class="@GetInputClass(regEmailErrors)"
                                   placeholder="Email" />
                        </div>
                        @if (regEmailErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regEmailErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <!-- PASSWORD -->
                        <div class="input-group password">
                            <i class="fa-solid fa-lock icon"></i>
                            <input type="@regPasswordType"
                                   @bind="regPassword"
                                   @bind:event="oninput"
                                   @bind:after="ValidateRegPassword"
                                   class="@GetInputClass(regPasswordErrors)"
                                   placeholder="Password"
                                   @oncopy:preventDefault />
                            <button type="button" class="reveal-btn"
                                    @onmousedown="ShowRegPassword"
                                    @onmouseup="HideRegPassword"
                                    @onmouseleave="HideRegPassword"
                                    @ontouchstart="ShowRegPassword"
                                    @ontouchend="HideRegPassword">
                                <i class="fa-solid @regPasswordIcon"></i>
                            </button>
                        </div>
                        @if (regPasswordErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regPasswordErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <!-- CONFIRM PASSWORD -->
                        <div class="input-group confirm">
                            <i class="fa-solid fa-lock icon"></i>
                            <input type="@regConfirmPasswordType"
                                   @bind="regPasswordConfirm"
                                   @bind:event="oninput"
                                   @bind:after="ValidateConfirmPassword"
                                   class="@GetInputClass(regConfirmErrors)"
                                   placeholder="Confirm Password"
                                   @oncopy:preventDefault />
                            <button type="button" class="reveal-btn"
                                    @onmousedown="ShowRegConfirmPassword"
                                    @onmouseup="HideRegConfirmPassword"
                                    @onmouseleave="HideRegConfirmPassword"
                                    @ontouchstart="ShowRegConfirmPassword"
                                    @ontouchend="HideRegConfirmPassword">
                                <i class="fa-solid @regConfirmPasswordIcon"></i>
                            </button>
                        </div>
                        @if (regConfirmErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regConfirmErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <!-- FIRST & LAST NAME -->
                        <div class="input-group firstname">
                            <i class="fa-solid fa-user icon"></i>
                            <input @bind="regFirstName"
                                   @bind:event="oninput"
                                   @bind:after="ValidateFirstName"
                                   class="@GetInputClass(regFirstNameErrors)"
                                   placeholder="First Name" />
                        </div>
                        <div class="input-group lastname">
                            <i class="fa-solid fa-user icon"></i>
                            <input @bind="regLastName"
                                   @bind:event="oninput"
                                   @bind:after="ValidateLastName"
                                   class="@GetInputClass(regLastNameErrors)"
                                   placeholder="Last Name" />
                        </div>
                        @if (regFirstNameErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regFirstNameErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }
                        @if (regLastNameErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regLastNameErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <!-- AGE & COUNTRY -->
                        <div class="input-group age">
                            <i class="fa-solid fa-cake-candles icon"></i>
                            <select @bind="regAge"
                                    @bind:event="onchange"
                                    @bind:after="ValidateAge"
                                    class="@GetInputClass(regAgeErrors)">
                                <option value="">Age</option>
                                @for (int i = 18; i <= 100; i++)
                                {
                                    <option value="@i">@i</option>
                                }
                            </select>
                        </div>
                        @if (regAgeErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regAgeErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <div class="input-group country">
                            <i class="fa-solid fa-flag icon"></i>
                            <select @bind="regCountry"
                                    @bind:event="onchange"
                                    @bind:after="ValidateCountry"
                                    class="@GetInputClass(regCountryErrors)">
                                <option value="">Country of Origin</option>
                                @foreach (var c in countries!)
                                {
                                    <option value="@c.IsoCode">@c.Name</option>
                                }
                            </select>
                        </div>
                        @if (regCountryErrors.Any())
                        {
                            <ul class="validation-message">
                                @foreach (var e in regCountryErrors)
                                {
                                    <li>@e</li>
                                }
                            </ul>
                        }

                        <button type="submit" class="submit">Sign Up</button>
                    </form>
                </div>
            </div>
        }

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="message">@Message</p>
        }
    </div>
</div>

@code {
    private bool isRegister = false;
    private bool rememberMe = false;

    private string? Message;
    private string username = "", password = "";
    private string regUsername = "", regEmail = "";
    private string regPassword = "", regPasswordConfirm = "";
    private string regFirstName = "", regLastName = "";
    private string regAge = "", regCountry = "";
    private IBrowserFile? regPhoto;
    private string? photoPreview;
    private IEnumerable<CountryDto>? countries;

    protected override async Task OnInitializedAsync() =>
      countries = await ApiClient.GetAsync<IEnumerable<CountryDto>>("api/countries");

    private List<string> regUsernameErrors = new(), regEmailErrors = new(),
                         regPasswordErrors = new(), regConfirmErrors = new(),
                         regFirstNameErrors = new(), regLastNameErrors = new(),
                         regAgeErrors = new(), regCountryErrors = new();

    private string loginPasswordType = "password",
                   regPasswordType = "password",
                   regConfirmPasswordType = "password";
    private string loginPasswordIcon = "fa-eye",
                   regPasswordIcon = "fa-eye",
                   regConfirmPasswordIcon = "fa-eye";

    private void ValidateRegUsername() => regUsernameErrors = RegisterValidator.ValidateUsername(regUsername);
    private void ValidateRegEmail() => regEmailErrors = RegisterValidator.ValidateEmail(regEmail);
    private void ValidateRegPassword()
    {
        regPasswordErrors = RegisterValidator.ValidatePassword(regPassword);
        ValidateConfirmPassword();
    }
    private void ValidateConfirmPassword() =>
      regConfirmErrors = RegisterValidator.ValidateConfirmPassword(regPassword, regPasswordConfirm);
    private void ValidateFirstName() => regFirstNameErrors = RegisterValidator.ValidateFirstName(regFirstName);
    private void ValidateLastName() => regLastNameErrors = RegisterValidator.ValidateLastName(regLastName);
    private void ValidateAge() => regAgeErrors = RegisterValidator.ValidateAge(regAge);
    private void ValidateCountry() => regCountryErrors = RegisterValidator.ValidateCountry(regCountry);

    private bool ValidateForm()
    {
        ValidateRegUsername();
        ValidateRegEmail();
        ValidateRegPassword();
        ValidateConfirmPassword();
        ValidateFirstName();
        ValidateLastName();
        ValidateAge();
        ValidateCountry();
        return !(regUsernameErrors.Any()
               || regEmailErrors.Any()
               || regPasswordErrors.Any()
               || regConfirmErrors.Any()
               || regFirstNameErrors.Any()
               || regLastNameErrors.Any()
               || regAgeErrors.Any()
               || regCountryErrors.Any());
    }

    private static string GetInputClass(List<string> errors) =>
      errors.Any() ? "invalid" : string.Empty;

    private async Task OnLoginAsync()
    {
        var response = await ApiClient.PostAsync<object, AuthTokenDto>(
          "api/auth/login",
          new { Email = username, Password = password });

        if (response?.Token != null)
        {
            ApiClient.SetToken(response.Token);
            await AuthState.SignInAsync(username, response.Token);
            if (rememberMe)
            {
                var saved = JsonSerializer.Serialize(new SavedLogin { Username = username, Password = password });
                await JS.InvokeVoidAsync("localStorage.setItem", "saved-login", saved);
            }
            else
            {
                await JS.InvokeVoidAsync("localStorage.removeItem", "saved-login");
            }
            Message = "Logged in";
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = "Invalid credentials";
        }
    }

    private async Task OnRegisterAsync()
    {
        if (!ValidateForm()) return;

        var content = new MultipartFormDataContent();
        content.Add(new StringContent(regUsername), "Username");
        content.Add(new StringContent(regEmail), "Email");
        content.Add(new StringContent(regPassword), "Password");
        content.Add(new StringContent(regFirstName), "FirstName");
        content.Add(new StringContent(regLastName), "LastName");
        content.Add(new StringContent(regAge), "Age");
        content.Add(new StringContent(regCountry), "CountryOfOrigin");
        if (regPhoto != null)
        {
            var fileContent = new StreamContent(regPhoto.OpenReadStream(10 * 1024 * 1024));
            fileContent.Headers.ContentType = new MediaTypeHeaderValue(regPhoto.ContentType);
            content.Add(fileContent, "Photo", regPhoto.Name);
        }

        var response = await ApiClient.PostMultipartAsync<AuthTokenDto>("api/auth/register", content);

        if (response?.Token != null)
        {
            ApiClient.SetToken(response.Token);
            await AuthState.SignInAsync(regUsername, response.Token);
            Message = "Registered";
            Navigation.NavigateTo("/");
        }
        else
        {
            Message = "Registration failed";
        }
    }

    private void ShowLoginPassword()
    {
        loginPasswordType = "text";
        loginPasswordIcon = "fa-eye-slash";
    }
    private void HideLoginPassword()
    {
        loginPasswordType = "password";
        loginPasswordIcon = "fa-eye";
    }
    private void ShowRegPassword()
    {
        regPasswordType = "text";
        regPasswordIcon = "fa-eye-slash";
    }
    private void HideRegPassword()
    {
        regPasswordType = "password";
        regPasswordIcon = "fa-eye";
    }
    private void ShowRegConfirmPassword()
    {
        regConfirmPasswordType = "text";
        regConfirmPasswordIcon = "fa-eye-slash";
    }
    private void HideRegConfirmPassword()
    {
        regConfirmPasswordType = "password";
        regConfirmPasswordIcon = "fa-eye";
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            regPhoto = file;
            var buffer = new byte[file.Size];
            await file.OpenReadStream(10 * 1024 * 1024).ReadAsync(buffer);
            photoPreview = $"data:{file.ContentType};base64,{Convert.ToBase64String(buffer)}";
        }
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var json = await JS.InvokeAsync<string>("localStorage.getItem", "saved-login");
            if (!string.IsNullOrEmpty(json))
            {
                try
                {
                    var saved = JsonSerializer.Deserialize<SavedLogin>(json);
                    if (saved != null)
                    {
                        username = saved.Username;
                        password = saved.Password;
                        rememberMe = true;
                        StateHasChanged();
                    }
                }
                catch
                {
                    await JS.InvokeVoidAsync("localStorage.removeItem", "saved-login");
                }
            }
        }
    }

    private class SavedLogin
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
    }
}
